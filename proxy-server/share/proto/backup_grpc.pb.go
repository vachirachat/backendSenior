// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BackupClient is the client API for Backup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupClient interface {
	OnMessageIn(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Empty, error)
	IsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
}

type backupClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupClient(cc grpc.ClientConnInterface) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) OnMessageIn(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Backup/OnMessageIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) IsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Backup/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupServer is the server API for Backup service.
// All implementations must embed UnimplementedBackupServer
// for forward compatibility
type BackupServer interface {
	OnMessageIn(context.Context, *Chat) (*Empty, error)
	IsReady(context.Context, *Empty) (*Status, error)
	// mustEmbedUnimplementedBackupServer()
}

// UnimplementedBackupServer must be embedded to have forward compatible implementations.
type UnimplementedBackupServer struct {
}

func (UnimplementedBackupServer) OnMessageIn(context.Context, *Chat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessageIn not implemented")
}
func (UnimplementedBackupServer) IsReady(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}

// func (UnimplementedBackupServer) mustEmbedUnimplementedBackupServer() {}

// // UnsafeBackupServer may be embedded to opt out of forward compatibility for this service.
// // Use of this interface is not recommended, as added methods to BackupServer will
// // result in compilation errors.
// type UnsafeBackupServer interface {
// 	mustEmbedUnimplementedBackupServer()
// }

func RegisterBackupServer(s grpc.ServiceRegistrar, srv BackupServer) {
	s.RegisterService(&_Backup_serviceDesc, srv)
}

func _Backup_OnMessageIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).OnMessageIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Backup/OnMessageIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).OnMessageIn(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Backup/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).IsReady(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Backup",
	HandlerType: (*BackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessageIn",
			Handler:    _Backup_OnMessageIn_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _Backup_IsReady_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup.proto",
}
